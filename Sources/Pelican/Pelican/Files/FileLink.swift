//
//  FileLink.swift
//  Pelican
//
//  Created by Takanu Kyriako on 31/08/2017.
//

import Foundation
import Vapor

public enum UploadLocation {
	case path(String)
	case http(String)
}

extension UploadLocation {
	
	var data: String {
		switch self {
		case .path(let path):
			return path
		case .http(let http):
			return http
		}
	}
}

/**
Defines the core data required to upload and cache a file.
*/
public class FileLink {
	
	/// Automatically generated based on the name of the file.
	var name: String
	/// Whether the location of the file is local or remove, as well as the path to that file.
	var location: UploadLocation
	/// What kind of file is represented.  Normally generated by the FileLink protocol.
	var type: String
	
	// Consider replacing UploadLocation with URL in the future.
	
	/**
	Initialises the FileLink using a path to a local resource.  The path must be local and defined from /Public.
	
	eg. ```karaoke/jack1.png```
	*/
	init(withPath path: String, type: String) {
		self.location = .path(path)
		self.type = type
		
		var pathChunks = path.components(separatedBy: "/")
		self.name = pathChunks.removeLast()
	}
	
	/**
	Initialises the FileLink using a path to an external resource, as an HTTP link.
	
	- warning: Pelican currently doesn't support HTTP uploading, please don't use it.
	*/
	init(withHTTP http: String, type: String) {
		self.location = .http(http)
		self.type = type
		
		var pathChunks = http.components(separatedBy: "/")
		self.name = pathChunks.removeLast()
	}
}
